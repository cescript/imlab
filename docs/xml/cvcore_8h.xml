<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="cvcore_8h" kind="file">
    <compoundname>cvcore.h</compoundname>
    <includes refid="core_8h" local="yes">core.h</includes>
    <includes refid="mlcore_8h" local="yes">mlcore.h</includes>
    <includedby refid="imlab_8h" local="yes">C:/Users/cescript/CLionProjects/imlab/include/imlab.h</includedby>
    <incdepgraph>
      <node id="40">
        <label>stdarg.h</label>
      </node>
      <node id="39">
        <label>stdint.h</label>
      </node>
      <node id="37">
        <label>core.h</label>
        <link refid="core_8h"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>omp.h</label>
      </node>
      <node id="41">
        <label>string.h</label>
      </node>
      <node id="43">
        <label>mlcore.h</label>
        <link refid="mlcore_8h"/>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>math.h</label>
      </node>
      <node id="42">
        <label>core_macros.h</label>
        <link refid="core__macros_8h"/>
      </node>
      <node id="46">
        <label>prcore.h</label>
        <link refid="prcore_8h"/>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>C:/Users/cescript/CLionProjects/imlab/include/header/cvcore.h</label>
        <link refid="cvcore.h"/>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="48">
        <label>C:/Users/cescript/CLionProjects/imlab/include/imlab.h</label>
        <link refid="imlab_8h"/>
      </node>
      <node id="47">
        <label>C:/Users/cescript/CLionProjects/imlab/include/header/cvcore.h</label>
        <link refid="cvcore.h"/>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structfeature__t" prot="public">feature_t</innerclass>
    <innerclass refid="structhaar__t" prot="public">haar_t</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="cvcore_8h_1a7bad5b7fa6f3365c0f5a7086d67046e9" prot="public" static="no">
        <name>cv_algorithm_t</name>
        <enumvalue id="cvcore_8h_1a7bad5b7fa6f3365c0f5a7086d67046e9a7adca869aca51a97fd4d0fa2c25ff750" prot="public">
          <name>CV_ENCODER</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cvcore_8h_1a7bad5b7fa6f3365c0f5a7086d67046e9a850157dc8885112a45ab1cad3f1f27a8" prot="public">
          <name>CV_LBP</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Local binary patterns are introduced as a texture measure for gray-level imagesojala1996comparative}. LBP is a feature operator that labels each pixel by thresholding with each of their neighbours so that the situation of the all neighbours can be compressed into the single value. The mathematical expression of the LBP operator: <formula id="11">\[LBP_{P,R}=\sum_{p=0}^{P-1}u(g_p-g_c)2^p\]</formula> Here <formula id="12">$u(x)$</formula> is a unit function, <formula id="13">$g_c$</formula> is the center pixel that LBP operator is applied, <formula id="14">$g_p$</formula> is the <formula id="15">$p^{th}$</formula> neighbour in <formula id="16">$R$</formula> neighbourhood and the <formula id="17">$P$</formula> is the number of neighbours.</para><para>Generally LBP operator is applied to the given image and then the resulting image is divided into $8 8$ sub-blocks by $4$ pixel overlap. For each $8 8$ patch we compute the <formula id="18">$64$</formula>-bin histogram. Concatenating these histogram vectors we construct the feature descriptor.</para><para>The following parameters are supported for LBP algorithm</para><para><table rows="5" cols="3"><row>
<entry thead="yes"><para>parameter</para></entry><entry thead="yes"><para>explanation</para></entry><entry thead="yes"><para>default value </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>radius</computeroutput> </para></entry><entry thead="no"><para>Radius of the LBP</para></entry><entry thead="no"><para>1 </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>neighbors</computeroutput> </para></entry><entry thead="no"><para>Number of neighbors to be visited</para></entry><entry thead="no"><para>8 </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>block</computeroutput>[2]</para></entry><entry thead="no"><para>Block size of the LBP</para></entry><entry thead="no"><para>[8x8] </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>uniform</computeroutput> </para></entry><entry thead="no"><para>Integer indicating that uniform LBP (1) or normal LBP (0)</para></entry><entry thead="no"><para>0 </para></entry></row>
</table>
</para><para>An example usage <programlisting><codeline><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfeature__t" kindref="compound">feature_t</ref><sp/>*lbp<sp/>=<sp/><ref refid="cvcore_8h_1a14a716e8675fbbde40a8b3642a9cf23f" kindref="member">feature_create</ref>(<ref refid="cvcore_8h_1a7bad5b7fa6f3365c0f5a7086d67046e9a850157dc8885112a45ab1cad3f1f27a8" kindref="member">CV_LBP</ref>,<sp/><ref refid="core_8h_1a2248f650cacb1488751ff8ab82300752" kindref="member">width</ref>(gray),<ref refid="core_8h_1ac0f4877be8d0a1990393b6fc48236840" kindref="member">height</ref>(gray),<sp/></highlight><highlight class="stringliteral">&quot;radius:1<sp/>neighbors:8<sp/>block:[8<sp/>8]<sp/>uniform:0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="cvcore_8h_1a794216904525b351058edd92b1d1d2fb" kindref="member">feature_view</ref>(lbp);</highlight></codeline>
</programlisting> </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="cvcore_8h_1a7bad5b7fa6f3365c0f5a7086d67046e9a026673aae662bc1a66d8af89fc7d7e19" prot="public">
          <name>CV_HOG</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Histogram of oriented gradients are commonly used feature descriptors for object detection. HOG is first proposed by Dallal et.al for pedestrian detection dalal2005histograms} and Singh et.al for gender classification singh2013comparison}. Similar to the LBP features, HOG keeps weighted orientation of the edges in a small sub-block in a compressed histogram vector.</para><para><formula id="0">$9$</formula>-bin HOG for each <formula id="1">$8\times 8$</formula> sub-blocks as the feature vector. In order to compress the magnitude and the angle of the orientation in a <formula id="0">$9$</formula>-bin histogram for a given <formula id="2">$\theta$</formula> angle and <formula id="3">$M$</formula> magnitude, we create the weighted histogram vector $h$ for the <formula id="4">$bins = [0, 22, 45, 67, 90, ..., 145, 167, 180]$</formula> as follows: <formula id="5">\[ b_1 = \arg\min(bins-\theta &gt; 0)\]</formula> <formula id="6">\[ b_2 = \arg\max(bins-\theta &lt; 0) \]</formula> <formula id="7">\[ h(b_1) = h(b_1)+ M \frac{b_1-\theta}{b_1-b_2}\]</formula> <formula id="8">\[ h(b_2) = h(b_2)+ M \frac{\theta-b_2}{b_1-b_2}\]</formula> After the computation of the histogram for each sub-block, we combine the histograms for every <formula id="9">$2 \times 2$</formula> sub-block neighbourhood by adding, so we reduce the feature vector size by <formula id="10">$4$</formula> times.</para><para><table rows="5" cols="3"><row>
<entry thead="yes"><para>parameter</para></entry><entry thead="yes"><para>explanation</para></entry><entry thead="yes"><para>default value </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>bins</computeroutput> </para></entry><entry thead="no"><para>Number of bins in the gradient histogram</para></entry><entry thead="no"><para>9 </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>cell</computeroutput>[2]</para></entry><entry thead="no"><para>Cell size for the histogram of the gradient method. Given image width and height must be divisible bye the cell size</para></entry><entry thead="no"><para>[8x8] </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>block</computeroutput>[2]</para></entry><entry thead="no"><para>Block size for the Histogram of the gradient method. Each block is a collection of cells</para></entry><entry thead="no"><para>[2x2] </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>stride</computeroutput>[2]</para></entry><entry thead="no"><para>Overlap between the histogram cells</para></entry><entry thead="no"><para>[1x1] </para></entry></row>
</table>
</para><para>An example usage <programlisting><codeline><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfeature__t" kindref="compound">feature_t</ref><sp/>*hog<sp/>=<sp/><ref refid="cvcore_8h_1a14a716e8675fbbde40a8b3642a9cf23f" kindref="member">feature_create</ref>(<ref refid="cvcore_8h_1a7bad5b7fa6f3365c0f5a7086d67046e9a026673aae662bc1a66d8af89fc7d7e19" kindref="member">CV_HOG</ref>,<sp/><ref refid="core_8h_1a2248f650cacb1488751ff8ab82300752" kindref="member">width</ref>(gray),<ref refid="core_8h_1ac0f4877be8d0a1990393b6fc48236840" kindref="member">height</ref>(gray),<sp/></highlight><highlight class="stringliteral">&quot;bins:18<sp/>block:[6<sp/>6]<sp/>cell:[16<sp/>16]<sp/>stride:[1<sp/>1]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="cvcore_8h_1a794216904525b351058edd92b1d1d2fb" kindref="member">feature_view</ref>(hog);</highlight></codeline>
</programlisting> </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="cvcore_8h_1a7bad5b7fa6f3365c0f5a7086d67046e9a145677c5cc30f00c7a314a909dbb0c2d" prot="public">
          <name>CV_SIFT</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cvcore_8h_1a7bad5b7fa6f3365c0f5a7086d67046e9a31f9097b96db2b93074a3a7f55af51cf" prot="public">
          <name>CV_NPD</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/cvcore.h" line="75" column="1" bodyfile="C:/Users/cescript/CLionProjects/imlab/include/header/cvcore.h" bodystart="75" bodyend="81"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="cvcore_8h_1a14a716e8675fbbde40a8b3642a9cf23f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structfeature__t" kindref="compound">feature_t</ref> *</type>
        <definition>struct feature_t* feature_create</definition>
        <argsstring>(enum cv_algorithm_t algorithm, uint32_t width, uint32_t height, char *options)</argsstring>
        <name>feature_create</name>
        <param>
          <type>enum <ref refid="cvcore_8h_1a7bad5b7fa6f3365c0f5a7086d67046e9" kindref="member">cv_algorithm_t</ref></type>
          <declname>algorithm</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>width</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>height</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Construct a feature extraction algorithm with the given parameters. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>algorithm</parametername>
</parameternamelist>
<parameterdescription>
<para>Algorithm to be used for feature extraction </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>Width of the input image that the features will be extracted </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>Height of the input image that the features will be extracted </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional algorithm parameters. Parameters that are not given by the <computeroutput>options</computeroutput> are used with the default values. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structfeature__t" kindref="compound">feature_t</ref> object than can be used for feature extraction </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/cvcore.h" line="102" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cvcore_8h_1a916448fa9a444db432aa9590e686856c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t feature_size</definition>
        <argsstring>(struct feature_t *model)</argsstring>
        <name>feature_size</name>
        <param>
          <type>struct <ref refid="structfeature__t" kindref="compound">feature_t</ref> *</type>
          <declname>model</declname>
        </param>
        <briefdescription>
<para>Returns the feature size of the model. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para>Input model to be used for feature extraction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Bytes necessary to store the extracted feature </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/cvcore.h" line="109" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cvcore_8h_1a794216904525b351058edd92b1d1d2fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void feature_view</definition>
        <argsstring>(struct feature_t *model)</argsstring>
        <name>feature_view</name>
        <param>
          <type>struct <ref refid="structfeature__t" kindref="compound">feature_t</ref> *</type>
          <declname>model</declname>
        </param>
        <briefdescription>
<para>Displays the properties of the created model. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para>Input model to be displayed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/cvcore.h" line="114" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cvcore_8h_1ab9830342e09c9529e9c5bbf404c7d836" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="core_8h_1a387664de0ac452f11abed4a7d9c2cc5d" kindref="member">return_t</ref></type>
        <definition>return_t feature_extract</definition>
        <argsstring>(matrix_t *img, struct feature_t *model, float *output)</argsstring>
        <name>feature_extract</name>
        <param>
          <type><ref refid="structmatrix__t" kindref="compound">matrix_t</ref> *</type>
          <declname>img</declname>
        </param>
        <param>
          <type>struct <ref refid="structfeature__t" kindref="compound">feature_t</ref> *</type>
          <declname>model</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>Extract the features from the given image and fills the output array. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>img</parametername>
</parameternamelist>
<parameterdescription>
<para>Input image that the features will be extracted </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para>Input model to be used for feature extraction </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>Output array that the features will be written </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return success or the corresponding error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/cvcore.h" line="124" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cvcore_8h_1a5b925d614265b7aac90e71f06a71b89c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="core_8h_1a387664de0ac452f11abed4a7d9c2cc5d" kindref="member">return_t</ref></type>
        <definition>return_t feature_image</definition>
        <argsstring>(matrix_t *img, struct feature_t *model, matrix_t *output)</argsstring>
        <name>feature_image</name>
        <param>
          <type><ref refid="structmatrix__t" kindref="compound">matrix_t</ref> *</type>
          <declname>img</declname>
        </param>
        <param>
          <type>struct <ref refid="structfeature__t" kindref="compound">feature_t</ref> *</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="structmatrix__t" kindref="compound">matrix_t</ref> *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>Visualize the feature if it is possible. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>img</parametername>
</parameternamelist>
<parameterdescription>
<para>Input image that the features will be extracted </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para>Input model to be used for feature extraction </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>Output image that the visualized features will be written </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return success or the corresponding error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/cvcore.h" line="133" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cvcore_8h_1aef4190c4f9b4f468155c2187693c838c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct haar_feature_t *</type>
        <definition>struct haar_feature_t* haar_feature_create</definition>
        <argsstring>(double thr, int hl, double lv, int ln, int hr, double rv, int rn, int tilt, int length)</argsstring>
        <name>haar_feature_create</name>
        <param>
          <type>double</type>
          <declname>thr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>hl</declname>
        </param>
        <param>
          <type>double</type>
          <declname>lv</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ln</declname>
        </param>
        <param>
          <type>int</type>
          <declname>hr</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rv</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rn</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tilt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/cvcore.h" line="153" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cvcore_8h_1a1f162a445190a88df839719333273010" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct haar_tree_t *</type>
        <definition>struct haar_tree_t* haar_tree_create</definition>
        <argsstring>(int length)</argsstring>
        <name>haar_tree_create</name>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/cvcore.h" line="154" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cvcore_8h_1a70d57e629f795eaf02a623a5da469bf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct haar_stage_t *</type>
        <definition>struct haar_stage_t* haar_stage_create</definition>
        <argsstring>(double thr, int length)</argsstring>
        <name>haar_stage_create</name>
        <param>
          <type>double</type>
          <declname>thr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/cvcore.h" line="155" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cvcore_8h_1a459edb3984652e1a5e309a77807c85a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structhaar__t" kindref="compound">haar_t</ref> *</type>
        <definition>struct haar_t* haar_create</definition>
        <argsstring>(int s1, int s2, int length)</argsstring>
        <name>haar_create</name>
        <param>
          <type>int</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>s2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/cvcore.h" line="156" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cvcore_8h_1a65f258ffe0bffd7e44c472718c7ee2b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structhaar__t" kindref="compound">haar_t</ref> *</type>
        <definition>struct haar_t* haar_read</definition>
        <argsstring>(const char *filename)</argsstring>
        <name>haar_read</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reads haar json file and parse the input into the <ref refid="structhaar__t" kindref="compound">haar_t</ref> structure <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>Input file to be read </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return success or relative error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/cvcore.h" line="162" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>File containing example of doxygen usage for quick reference. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>My Self </para></simplesect>
<simplesect kind="date"><para>9 Sep 2012 Here typically goes a more extensive explanation of what the header defines. Doxygens tags are words preceeded by either a backslash \ or by an at symbol @. </para></simplesect>
<simplesect kind="see"><para><ulink url="http://www.stack.nl/~dimitri/doxygen/docblocks.html">http://www.stack.nl/~dimitri/doxygen/docblocks.html</ulink> </para><simplesectsep/><para><ulink url="http://www.stack.nl/~dimitri/doxygen/commands.html">http://www.stack.nl/~dimitri/doxygen/commands.html</ulink> </para></simplesect>
</para>    </detaileddescription>
    <location file="C:/Users/cescript/CLionProjects/imlab/include/header/cvcore.h"/>
  </compounddef>
</doxygen>
