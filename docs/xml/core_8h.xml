<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="core_8h" kind="file">
    <compoundname>core.h</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdint.h</includes>
    <includes local="no">stdarg.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="core__macros_8h" local="yes">core_macros.h</includes>
    <includedby refid="alcore_8h" local="yes">C:/Users/cescript/CLionProjects/imlab/include/header/alcore.h</includedby>
    <includedby refid="cvcore_8h" local="yes">C:/Users/cescript/CLionProjects/imlab/include/header/cvcore.h</includedby>
    <includedby refid="mlcore_8h" local="yes">C:/Users/cescript/CLionProjects/imlab/include/header/mlcore.h</includedby>
    <includedby refid="prcore_8h" local="yes">C:/Users/cescript/CLionProjects/imlab/include/header/prcore.h</includedby>
    <includedby refid="imcore_8h" local="yes">C:/Users/cescript/CLionProjects/imlab/include/header/imcore.h</includedby>
    <includedby refid="iocore_8h" local="yes">C:/Users/cescript/CLionProjects/imlab/include/header/iocore.h</includedby>
    <includedby refid="lacore_8h" local="yes">C:/Users/cescript/CLionProjects/imlab/include/header/lacore.h</includedby>
    <includedby refid="imlab_8h" local="yes">C:/Users/cescript/CLionProjects/imlab/include/imlab.h</includedby>
    <incdepgraph>
      <node id="13">
        <label>stdarg.h</label>
      </node>
      <node id="12">
        <label>stdint.h</label>
      </node>
      <node id="10">
        <label>C:/Users/cescript/CLionProjects/imlab/include/header/core.h</label>
        <link refid="core.h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>string.h</label>
      </node>
      <node id="15">
        <label>core_macros.h</label>
        <link refid="core__macros_8h"/>
      </node>
      <node id="11">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="16">
        <label>C:/Users/cescript/CLionProjects/imlab/include/header/core.h</label>
        <link refid="core.h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>C:/Users/cescript/CLionProjects/imlab/include/imlab.h</label>
        <link refid="imlab_8h"/>
      </node>
      <node id="24">
        <label>C:/Users/cescript/CLionProjects/imlab/include/header/lacore.h</label>
        <link refid="lacore_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>C:/Users/cescript/CLionProjects/imlab/include/header/imcore.h</label>
        <link refid="imcore_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>C:/Users/cescript/CLionProjects/imlab/include/header/mlcore.h</label>
        <link refid="mlcore_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>C:/Users/cescript/CLionProjects/imlab/include/header/prcore.h</label>
        <link refid="prcore_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>C:/Users/cescript/CLionProjects/imlab/include/header/cvcore.h</label>
        <link refid="cvcore_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>C:/Users/cescript/CLionProjects/imlab/include/header/iocore.h</label>
        <link refid="iocore_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>C:/Users/cescript/CLionProjects/imlab/include/header/alcore.h</label>
        <link refid="alcore_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structvector__t" prot="public">vector_t</innerclass>
    <innerclass refid="structmatrix__t" prot="public">matrix_t</innerclass>
    <innerclass refid="structstring__t" prot="public">string_t</innerclass>
    <innerclass refid="structrectangle__t" prot="public">rectangle_t</innerclass>
    <innerclass refid="structpoint__t" prot="public">point_t</innerclass>
      <sectiondef kind="user-defined">
      <header>IMLAB Type Comparators</header>
      <description><para>Returns true if the asked question is true for matrix/vector </para></description>
      <memberdef kind="define" id="core_8h_1a8b6da886bdf82531aecf01977c851957" prot="public" static="no">
        <name>is_8s</name>
        <param><defname>var</defname></param>
        <briefdescription>
<para>return true if the given matrix or vector holds NULL data type </para>        </briefdescription>
        <detaileddescription>
<para>return true if the given matrix or vector holds int8_t data type </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="194" column="9" bodyfile="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1afeef4f6dcfc90700e4600825460d7f56" prot="public" static="no">
        <name>is_8u</name>
        <param><defname>var</defname></param>
        <briefdescription>
<para>return true if the given matrix or vector holds uint8_t data type </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="196" column="9" bodyfile="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" bodystart="196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1a3a0ac901f4c32e38dc3ea38ff757e378" prot="public" static="no">
        <name>is_16s</name>
        <param><defname>var</defname></param>
        <briefdescription>
<para>return true if the given matrix or vector holds int16_t data type </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="198" column="9" bodyfile="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1aa8028b3a6e802e3046b7f5bbb978e00e" prot="public" static="no">
        <name>is_16u</name>
        <param><defname>var</defname></param>
        <briefdescription>
<para>return true if the given matrix or vector holds uint16_t data type </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="200" column="9" bodyfile="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1a15631a0757a053f32aaa44c96d6e4c30" prot="public" static="no">
        <name>is_32s</name>
        <param><defname>var</defname></param>
        <briefdescription>
<para>return true if the given matrix or vector holds int32_t data type </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="202" column="9" bodyfile="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1a16fdc1d27b50bd09209922dc1549b5d0" prot="public" static="no">
        <name>is_32u</name>
        <param><defname>var</defname></param>
        <briefdescription>
<para>return true if the given matrix or vector holds uint32_t data type </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="204" column="9" bodyfile="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" bodystart="204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1a0a1cae3b3910d554956d4d709a6c18b6" prot="public" static="no">
        <name>is_32f</name>
        <param><defname>var</defname></param>
        <briefdescription>
<para>return true if the given matrix or vector holds float data type </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="206" column="9" bodyfile="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" bodystart="206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1aa5a28ba627f29f1342219bf0dc5a6695" prot="public" static="no">
        <name>is_64f</name>
        <param><defname>var</defname></param>
        <briefdescription>
<para>return true if the given matrix or vector holds double data type </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="208" column="9" bodyfile="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1aa7655e711eb223fc9105374fe72e7833" prot="public" static="no">
        <name>is_json_array</name>
        <param><defname>var</defname></param>
        <briefdescription>
<para>return true if the given matrix or vector holds a JSON array </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="210" column="9" bodyfile="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" bodystart="210" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1a599dd86cddd2e430728dda5878bf512c" prot="public" static="no">
        <name>is_json_object</name>
        <param><defname>var</defname></param>
        <briefdescription>
<para>return true if the given matrix or vector holds a JSON object </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="212" column="9" bodyfile="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" bodystart="212" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1ab49f5e782cc4e7d830292f6a7c5b0258" prot="public" static="no">
        <name>is_image</name>
        <param><defname>var</defname></param>
        <briefdescription>
<para>return true if the given matrix or vector is image </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="214" column="9" bodyfile="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" bodystart="214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1a4a351faea6bd908be7505a7db1cd17a9" prot="public" static="no">
        <name>is_integer</name>
        <param><defname>var</defname></param>
        <briefdescription>
<para>return true if the given matrix or vector is integer </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="216" column="9" bodyfile="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" bodystart="216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1aeefb4b24909d9e7058d4dfeb28519990" prot="public" static="no">
        <name>is_numeric</name>
        <param><defname>var</defname></param>
        <briefdescription>
<para>return true if the given matrix or vector is floating point number </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="218" column="9" bodyfile="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1adb210060fc96425d3a97be005c719fcd" prot="public" static="no">
        <name>is_sametype</name>
        <param><defname>var1</defname></param>
        <param><defname>var2</defname></param>
        <briefdescription>
<para>return true if the given two matrice or vectors have the same type </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="220" column="9" bodyfile="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" bodystart="220" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="core_8h_1aae6636ce35e0b83971b4a023946cc5b7" prot="public" static="no">
        <name>IMLAB_PLATFORM_UNKNOWN</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="43" column="10" bodyfile="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1a90aac298ea110cc75f29fbdf0e08d4b3" prot="public" static="no">
        <name>IM_VERBOSE_ERROR</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="50" column="9" bodyfile="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1a0f459ed553910f78fdbaa0eb322a2753" prot="public" static="no">
        <name>IM_VERBOSE_WARNING</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="51" column="9" bodyfile="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1aedd32875dee1c6f87ac68f8ee23bf5ce" prot="public" static="no">
        <name>IM_VERBOSE_SUCCESS</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="52" column="9" bodyfile="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1a5c3cd107eb5b965fdf961b1aaac6ce3c" prot="public" static="no">
        <name>IMLAB_USE_OPENMP</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="53" column="9" bodyfile="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1a764d05461f4e45802297d9fc5a6bbbeb" prot="public" static="no">
        <name>idx</name>
        <param><defname>...</defname></param>
        <briefdescription>
<para>Return the index of the data at the given position. </para>        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal"><ref refid="structmatrix__t" kindref="compound">matrix_t</ref><sp/>*matA<sp/>=<sp/><ref refid="core_8h_1ac161f0f0a945b552762c995c759c9f5a" kindref="member">matrix_create</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/>5,5);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="structmatrix__t" kindref="compound">matrix_t</ref><sp/>*vecA<sp/>=<sp/><ref refid="core_8h_1a160b0d4b8d0836eda9a50bfa71514de8" kindref="member">vector_create</ref>(uint16_t,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">uint32_t<sp/>i1<sp/>=<sp/><ref refid="core_8h_1a764d05461f4e45802297d9fc5a6bbbeb" kindref="member">idx</ref>(matA,<sp/>0,1);<sp/></highlight><highlight class="comment">//<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">uint32_t<sp/>i2<sp/>=<sp/><ref refid="core_8h_1a764d05461f4e45802297d9fc5a6bbbeb" kindref="member">idx</ref>(matA,<sp/>0,2);<sp/></highlight><highlight class="comment">//<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">uint32_t<sp/>i3<sp/>=<sp/><ref refid="core_8h_1a764d05461f4e45802297d9fc5a6bbbeb" kindref="member">idx</ref>(matA,<sp/>1,1);<sp/></highlight><highlight class="comment">//<sp/>6</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">uint32_t<sp/>i4<sp/>=<sp/><ref refid="core_8h_1a764d05461f4e45802297d9fc5a6bbbeb" kindref="member">idx</ref>(matA,<sp/>1,2);<sp/></highlight><highlight class="comment">//<sp/>7</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">uint32_t<sp/>i5<sp/>=<sp/><ref refid="core_8h_1a764d05461f4e45802297d9fc5a6bbbeb" kindref="member">idx</ref>(vecA,<sp/>1);<sp/></highlight><highlight class="comment">//<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">uint32_t<sp/>i6<sp/>=<sp/><ref refid="core_8h_1a764d05461f4e45802297d9fc5a6bbbeb" kindref="member">idx</ref>(vecA,<sp/>2);<sp/></highlight><highlight class="comment">//<sp/>2</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="99" column="9" bodyfile="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1ab3884ab76d2d62da26a5c7f1ce9a3ec2" prot="public" static="no">
        <name>elemidx</name>
        <param><defname>...</defname></param>
        <briefdescription>
<para>Return the index of the given position in a byte array. </para>        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal"><ref refid="structmatrix__t" kindref="compound">matrix_t</ref><sp/>*matA<sp/>=<sp/><ref refid="core_8h_1ac161f0f0a945b552762c995c759c9f5a" kindref="member">matrix_create</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/>5,5);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="structmatrix__t" kindref="compound">matrix_t</ref><sp/>*vecA<sp/>=<sp/><ref refid="core_8h_1a160b0d4b8d0836eda9a50bfa71514de8" kindref="member">vector_create</ref>(uint16_t,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">uint32_t<sp/>i1<sp/>=<sp/><ref refid="core_8h_1ab3884ab76d2d62da26a5c7f1ce9a3ec2" kindref="member">elemidx</ref>(matA,<sp/>0,1);<sp/></highlight><highlight class="comment">//<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">uint32_t<sp/>i2<sp/>=<sp/><ref refid="core_8h_1ab3884ab76d2d62da26a5c7f1ce9a3ec2" kindref="member">elemidx</ref>(matA,<sp/>0,2);<sp/></highlight><highlight class="comment">//<sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">uint32_t<sp/>i3<sp/>=<sp/><ref refid="core_8h_1ab3884ab76d2d62da26a5c7f1ce9a3ec2" kindref="member">elemidx</ref>(matA,<sp/>1,1);<sp/></highlight><highlight class="comment">//<sp/>24</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">uint32_t<sp/>i4<sp/>=<sp/><ref refid="core_8h_1ab3884ab76d2d62da26a5c7f1ce9a3ec2" kindref="member">elemidx</ref>(matA,<sp/>1,2);<sp/></highlight><highlight class="comment">//<sp/>28</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">uint32_t<sp/>i5<sp/>=<sp/><ref refid="core_8h_1ab3884ab76d2d62da26a5c7f1ce9a3ec2" kindref="member">elemidx</ref>(vecA,<sp/>1);<sp/></highlight><highlight class="comment">//<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">uint32_t<sp/>i6<sp/>=<sp/><ref refid="core_8h_1ab3884ab76d2d62da26a5c7f1ce9a3ec2" kindref="member">elemidx</ref>(vecA,<sp/>2);<sp/></highlight><highlight class="comment">//<sp/>4</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="122" column="9" bodyfile="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1aea54a7ab7d3ae3f659e8e7e306a75b4e" prot="public" static="no">
        <name>elemsize</name>
        <param><defname>_var</defname></param>
        <briefdescription>
<para>Return the size of the element hold in the data pointer. </para>        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal"><ref refid="structmatrix__t" kindref="compound">matrix_t</ref><sp/>*matA<sp/>=<sp/><ref refid="core_8h_1ac161f0f0a945b552762c995c759c9f5a" kindref="member">matrix_create</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/>5,5);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="structmatrix__t" kindref="compound">matrix_t</ref><sp/>*vecA<sp/>=<sp/><ref refid="core_8h_1a160b0d4b8d0836eda9a50bfa71514de8" kindref="member">vector_create</ref>(uint16_t,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>element<sp/>size<sp/>of<sp/>the<sp/>container<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">uint32_t<sp/>i1<sp/>=<sp/><ref refid="core_8h_1aea54a7ab7d3ae3f659e8e7e306a75b4e" kindref="member">elemsize</ref>(matA);<sp/></highlight><highlight class="comment">//<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">uint32_t<sp/>i2<sp/>=<sp/><ref refid="core_8h_1aea54a7ab7d3ae3f659e8e7e306a75b4e" kindref="member">elemsize</ref>(vecA);<sp/></highlight><highlight class="comment">//<sp/>2</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="133" column="9" bodyfile="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1ac6d6bb3c237a30597ffce28bc8a48254" prot="public" static="no">
        <name>at</name>
        <param><defname>_type</defname></param>
        <param><defname>...</defname></param>
        <briefdescription>
<para>Returns the data value at the given position for the given imlab object. </para>        </briefdescription>
        <detaileddescription>
<para>It is overloaded with the number of input arguments. In the simplest case data takes two argument which is the type and imlab struct and returns the dataa at the zero index of the given variable. <programlisting><codeline><highlight class="normal"><ref refid="structmatrix__t" kindref="compound">matrix_t</ref><sp/>*matf<sp/>=<sp/><ref refid="core_8h_1ac161f0f0a945b552762c995c759c9f5a" kindref="member">matrix_create</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/>100,<sp/>100);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="core_8h_1ad3f79e7a2a8f1a28e2a2d0160bcc8204" kindref="member">mdata</ref><sp/>=<sp/><ref refid="core_8h_1ac6d6bb3c237a30597ffce28bc8a48254" kindref="member">at</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/>matf);<sp/></highlight><highlight class="comment">//<sp/>mdata<sp/>points<sp/>to<sp/>matf-&gt;_data(0,0,0)</highlight></codeline>
</programlisting> <ref refid="core_8h_1ac6d6bb3c237a30597ffce28bc8a48254" kindref="member">at</ref> macro can also be called with a starting index as follows: <programlisting><codeline><highlight class="normal"><ref refid="structvector__t" kindref="compound">vector_t</ref><sp/>veci<sp/>=<sp/><ref refid="core_8h_1a160b0d4b8d0836eda9a50bfa71514de8" kindref="member">vector_create</ref>(uint32_t,<sp/>100);</highlight></codeline>
<codeline><highlight class="normal">uint32_t<sp/><ref refid="core_8h_1a9b5423f6356f19bde71fc706337bbc2d" kindref="member">vdata</ref><sp/>=<sp/><ref refid="core_8h_1ac6d6bb3c237a30597ffce28bc8a48254" kindref="member">at</ref>(uint32_t,<sp/>veci,<sp/>5);<sp/></highlight><highlight class="comment">//<sp/>vdata<sp/>points<sp/>to<sp/>the<sp/>veci-&gt;_data(5)</highlight></codeline>
</programlisting> This macro can also be used to access a specific position of a matrix: <programlisting><codeline><highlight class="normal"><ref refid="structmatrix__t" kindref="compound">matrix_t</ref><sp/>mati<sp/>=<sp/><ref refid="core_8h_1ac161f0f0a945b552762c995c759c9f5a" kindref="member">matrix_create</ref>(uint32_t,<sp/>100,<sp/>100,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">uint32_t<sp/>m1data<sp/>=<sp/><ref refid="core_8h_1ac6d6bb3c237a30597ffce28bc8a48254" kindref="member">at</ref>(uint32_t,<sp/>mati,<sp/>5);<sp/></highlight><highlight class="comment">//<sp/>m1data<sp/>points<sp/>to<sp/>the<sp/>mati-&gt;_data(0,5,0)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">uint32_t<sp/>m2data<sp/>=<sp/><ref refid="core_8h_1ac6d6bb3c237a30597ffce28bc8a48254" kindref="member">at</ref>(uint32_t,<sp/>mati,<sp/>5,<sp/>7);<sp/></highlight><highlight class="comment">//<sp/>m2data<sp/>points<sp/>to<sp/>the<sp/>mati-&gt;_data(5,7,0)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">uint32_t<sp/>m3data<sp/>=<sp/><ref refid="core_8h_1ac6d6bb3c237a30597ffce28bc8a48254" kindref="member">at</ref>(uint32_t,<sp/>mati,<sp/>5,<sp/>7,<sp/>2);<sp/></highlight><highlight class="comment">//<sp/>m3data<sp/>points<sp/>to<sp/>the<sp/>mati-&gt;_data(5,7,2)</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="159" column="9" bodyfile="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1a17dd213399b468eaf01f9852a3ca36fc" prot="public" static="no">
        <name>data</name>
        <param><defname>_type</defname></param>
        <param><defname>...</defname></param>
        <briefdescription>
<para>Returns the data pointer for the given imlab container. </para>        </briefdescription>
        <detaileddescription>
<para>It is overloaded with the number of input arguments. In the simplest case data takes two argument which are the type and imlab struct and returns the pointer to the data. <programlisting><codeline><highlight class="normal"><ref refid="structmatrix__t" kindref="compound">matrix_t</ref><sp/>matf<sp/>=<sp/><ref refid="core_8h_1ac161f0f0a945b552762c995c759c9f5a" kindref="member">matrix_create</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/>100,<sp/>100);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*matf_data<sp/>=<sp/><ref refid="core_8h_1a17dd213399b468eaf01f9852a3ca36fc" kindref="member">data</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/>matf);<sp/></highlight><highlight class="comment">//<sp/>mdata<sp/>points<sp/>to<sp/>&amp;(matf-&gt;_data(0,0,0))</highlight></codeline>
</programlisting> <ref refid="core_8h_1a17dd213399b468eaf01f9852a3ca36fc" kindref="member">data</ref> macro can also be called with a starting index as follows: <programlisting><codeline><highlight class="normal"><ref refid="structvector__t" kindref="compound">vector_t</ref><sp/>veci<sp/>=<sp/><ref refid="core_8h_1a160b0d4b8d0836eda9a50bfa71514de8" kindref="member">vector_create</ref>(uint32_t,<sp/>100);</highlight></codeline>
<codeline><highlight class="normal">uint32_t<sp/>*v1data<sp/>=<sp/><ref refid="core_8h_1a17dd213399b468eaf01f9852a3ca36fc" kindref="member">data</ref>(uint32_t,<sp/>veci,<sp/>5);<sp/></highlight><highlight class="comment">//<sp/>v1data<sp/>points<sp/>to<sp/>the<sp/>&amp;(veci-&gt;_data(5))</highlight></codeline>
</programlisting> This macro can also be used to access a specific position of a matrix: <programlisting><codeline><highlight class="normal"><ref refid="structmatrix__t" kindref="compound">matrix_t</ref><sp/>mati<sp/>=<sp/><ref refid="core_8h_1ac161f0f0a945b552762c995c759c9f5a" kindref="member">matrix_create</ref>(uint32_t,<sp/>100,<sp/>100,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">uint32_t<sp/>*m1data<sp/>=<sp/><ref refid="core_8h_1a17dd213399b468eaf01f9852a3ca36fc" kindref="member">data</ref>(uint32_t,<sp/>mati,<sp/>5);<sp/></highlight><highlight class="comment">//<sp/>m1data<sp/>points<sp/>to<sp/>the<sp/>&amp;(mati-&gt;_data(0,5,0))</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">uint32_t<sp/>*m2data<sp/>=<sp/><ref refid="core_8h_1a17dd213399b468eaf01f9852a3ca36fc" kindref="member">data</ref>(uint32_t,<sp/>mati,<sp/>5,<sp/>7);<sp/></highlight><highlight class="comment">//<sp/>m2data<sp/>points<sp/>to<sp/>the<sp/>&amp;(mati-&gt;_data(5,7,0))</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">uint32_t<sp/>*m3data<sp/>=<sp/><ref refid="core_8h_1a17dd213399b468eaf01f9852a3ca36fc" kindref="member">data</ref>(uint32_t,<sp/>mati,<sp/>5,<sp/>7,<sp/>2);<sp/></highlight><highlight class="comment">//<sp/>m3data<sp/>points<sp/>to<sp/>the<sp/>&amp;(mati-&gt;_data(5,7,2))</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="184" column="9" bodyfile="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" bodystart="184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1a2290f1b93bdeea137600bf7b3aeb7ad5" prot="public" static="no">
        <name>typeof</name>
        <param><defname>_var</defname></param>
        <briefdescription>
<para>Return the type information of the given IMLAB container. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="227" column="9" bodyfile="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" bodystart="227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1a4992428012c4339bfd1e9e766fc19613" prot="public" static="no">
        <name>typeid</name>
        <param><defname>_var</defname></param>
        <briefdescription>
<para>Return the type id of the given IMLAB container. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="231" column="9" bodyfile="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" bodystart="231" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1a1b57799bf6c9cdf960b3a23d35e6eaa7" prot="public" static="no">
        <name>typename</name>
        <param><defname>_var</defname></param>
        <briefdescription>
<para>Return the type of the given container as string. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="236" column="9" bodyfile="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" bodystart="236" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1af3a84bb35e343ad05dfe98930d2445a0" prot="public" static="no">
        <name>type</name>
        <param><defname>type_name</defname></param>
        <briefdescription>
<para>Create a new IMLAB container compatible type from the given type name. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="241" column="9" bodyfile="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" bodystart="241" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1a2280a4d2504b5434cc7885dc127f12b5" prot="public" static="no">
        <name>message</name>
        <param><defname>cond</defname></param>
        <param><defname>msg</defname></param>
        <initializer><ref refid="core_8h_1acb1498be34b04cf145f6b2abdae81139" kindref="member">print_message_func</ref>(cond, __LINE__, __func__, msg)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="286" column="9" bodyfile="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" bodystart="286" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1a0571ef46332e2c3a940591c0ef238a45" prot="public" static="no">
        <name>array_create</name>
        <param><defname>...</defname></param>
        <briefdescription>
<para>Create a new array with the specified input paramaters. This macro definition calls the array_create function with the correct values of arguments. This macro overloaded with respect to number of arguments. The actual function is implemented to support one to four input arguments. The macro implementation could take up to five arguments as follows: </para>        </briefdescription>
        <detaileddescription>
<para><verbatim>array_create(&lt;type&gt;, dim1length, dim2length = 0, dim3length = 0, dim4length = 0)
</verbatim> In the simplest case the function could take the only type of the array and length of the array. This type could be any c types defined in stdint.h or struct created by the user. <programlisting><codeline><highlight class="normal">uint32_t<sp/>i;</highlight></codeline>
<codeline><highlight class="normal">uint32_t<sp/>*out<sp/>=<sp/><ref refid="core_8h_1a0571ef46332e2c3a940591c0ef238a45" kindref="member">array_create</ref>(uint32_t,<sp/>256);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>256;<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>out[i]<sp/>=<sp/>i<sp/>*<sp/>3;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"><ref refid="core_8h_1a3f5d08adf92318efd3aa3418606e686f" kindref="member">array_free</ref>(out);</highlight></codeline>
</programlisting> The above code will create an array object with the given length and initialize it with zeros. Than it can be used just as regular c pointers. The only important remark is to free the pointer allocated by <ref refid="core_8h_1a0571ef46332e2c3a940591c0ef238a45" kindref="member">array_create</ref> using the <ref refid="core_8h_1a3f5d08adf92318efd3aa3418606e686f" kindref="member">array_free</ref>. If you want to create multi dimensional array, call the function as follows: <programlisting><codeline><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>**out<sp/>=<sp/><ref refid="core_8h_1a0571ef46332e2c3a940591c0ef238a45" kindref="member">array_create</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/>1024,<sp/>100);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="core_8h_1a0299600e6d3dba5acead5053154ae799" kindref="member">array_size</ref>(out,0);<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/><ref refid="core_8h_1a0299600e6d3dba5acead5053154ae799" kindref="member">array_size</ref>(out,1);<sp/>j++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[i][j]<sp/>=<sp/>(i<sp/>*<sp/>j)<sp/>/<sp/>1024;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"><ref refid="core_8h_1a3f5d08adf92318efd3aa3418606e686f" kindref="member">array_free</ref>(out);</highlight></codeline>
</programlisting> This call of the <ref refid="core_8h_1a0571ef46332e2c3a940591c0ef238a45" kindref="member">array_create</ref> will create a 2 dimensional floating point data pointer and allocate 1024*100*sizeof(float) byte memory on the memory. It can be used as regular two dimensional arrays.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>&lt;type&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Content type of the array data. It could be any type char,uint32_t, float or user defined structures. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dimXlength</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the output array in the Xth dimension. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="326" column="9" bodyfile="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" bodystart="326" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1a160b0d4b8d0836eda9a50bfa71514de8" prot="public" static="no">
        <name>vector_create</name>
        <param><defname>...</defname></param>
        <briefdescription>
<para>Create a new vector with the specified input paramaters. This macro definition calls the vector_create function with the appropriate number of arguments. This macro overloaded with respect to number of arguments. The actual function takes three input arguments so the macro implementation could take up to three arguments as follows: </para>        </briefdescription>
        <detaileddescription>
<para><verbatim>vector_create(&lt;type&gt;, uint32_t capacity = 1, void *pointer = NULL)
</verbatim> Missing arguments are replaced with the default values. In the simplest case the function could take the only type of the vector. This type could be any c types defined in stdint.h or struct created by the user. <programlisting><codeline><highlight class="normal"><ref refid="structvector__t" kindref="compound">vector_t</ref><sp/>*out<sp/>=<sp/><ref refid="core_8h_1a160b0d4b8d0836eda9a50bfa71514de8" kindref="member">vector_create</ref>(uint32_t);</highlight></codeline>
</programlisting> The above code will create a vector object and set the initial length to zero and capacity to one. If you want to specify an initial capacity to vector just call: <programlisting><codeline><highlight class="normal"><ref refid="structvector__t" kindref="compound">vector_t</ref><sp/>*out<sp/>=<sp/><ref refid="core_8h_1a160b0d4b8d0836eda9a50bfa71514de8" kindref="member">vector_create</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/>1024);</highlight></codeline>
</programlisting> This call of the <ref refid="core_8h_1a160b0d4b8d0836eda9a50bfa71514de8" kindref="member">vector_create</ref> will create a floating point data pointer and allocate 1024*sizeof(float) byte memory on the memory. Since the vector object could be enlarged or shrinked, setting an initial capacity will increase the time efficincy for large vectors. It is also possible to create a vector from c pointers. In this case the third argument should be the pointer to the data: <programlisting><codeline><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>numbers[9]<sp/>=<sp/>{1,2,3,<sp/>4,5,6,<sp/>7,8,9};</highlight></codeline>
<codeline><highlight class="normal"><ref refid="structvector__t" kindref="compound">vector_t</ref><sp/>*out<sp/>=<sp/><ref refid="core_8h_1a160b0d4b8d0836eda9a50bfa71514de8" kindref="member">vector_create</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>9,<sp/>numbers);</highlight></codeline>
</programlisting> In this case vector_create will allocate memory and do <bold>memcpy</bold> operation on the given pointer.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>&lt;type&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Content type of the vector data. It could be any type char,uint32_t, float or user defined structures. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>capacity</parametername>
</parameternamelist>
<parameterdescription>
<para>Capacity of the output vector. If you dont know the exact size of the vector at the programming stage just write the expected length of the vector. IMLAB automatically increase the size if the data exceeds the vector length (This is only true if you use vector_push for the data insertion). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pointer</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the vector data. If this parameter is send to the function imlab will allocate a new memory and copies the send pointer into the container. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="structvector__t" kindref="compound">vector_t</ref> object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="552" column="9" bodyfile="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" bodystart="552" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1afb11743fece7ab60470cfb10ab380a81" prot="public" static="no">
        <name>vector_convert</name>
        <param><defname>_t1</defname></param>
        <param><defname>_t2</defname></param>
        <param><defname>_in</defname></param>
        <briefdescription>
<para>This method converts the input vector (t1 typed) into t2 typed vector by just casting values. </para>        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="core_8h_1a17dd213399b468eaf01f9852a3ca36fc" kindref="member">data</ref>[4]<sp/>=<sp/>{1.1,<sp/>2.2,<sp/>3.3,<sp/>4.4};</highlight></codeline>
<codeline><highlight class="normal"><ref refid="structmatrix__t" kindref="compound">matrix_t</ref><sp/>*vecA<sp/>=<sp/><ref refid="core_8h_1a160b0d4b8d0836eda9a50bfa71514de8" kindref="member">vector_create</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/>4,<sp/>data);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>print<sp/>the<sp/>type<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">printf(</highlight><highlight class="stringliteral">&quot;Type<sp/>of<sp/>vecA:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">(vecA));</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>print<sp/>the<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">printf(</highlight><highlight class="stringliteral">&quot;[%3.2f<sp/>%3.2f<sp/>%3.2f<sp/>%3.2f]\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="core_8h_1ac6d6bb3c237a30597ffce28bc8a48254" kindref="member">at</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/>vecA,<sp/>0),<sp/><ref refid="core_8h_1ac6d6bb3c237a30597ffce28bc8a48254" kindref="member">at</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/>vecA,<sp/>1),<sp/><ref refid="core_8h_1ac6d6bb3c237a30597ffce28bc8a48254" kindref="member">at</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/>vecA,<sp/>2),<sp/><ref refid="core_8h_1ac6d6bb3c237a30597ffce28bc8a48254" kindref="member">at</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/>vecA,<sp/>3));</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>convert<sp/>the<sp/>values<sp/>into<sp/>int<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="core_8h_1afb11743fece7ab60470cfb10ab380a81" kindref="member">vector_convert</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/>int32_t,<sp/>vecA);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>print<sp/>the<sp/>type<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">printf(</highlight><highlight class="stringliteral">&quot;Type<sp/>of<sp/>vecA:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">(matA));</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>print<sp/>the<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">printf(</highlight><highlight class="stringliteral">&quot;[%d<sp/>%d<sp/>%d<sp/>%d]\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="core_8h_1ac6d6bb3c237a30597ffce28bc8a48254" kindref="member">at</ref>(int32_t,<sp/>vecA,<sp/>0),<sp/><ref refid="core_8h_1ac6d6bb3c237a30597ffce28bc8a48254" kindref="member">at</ref>(int32_t,<sp/>vecA,<sp/>1),<sp/><ref refid="core_8h_1ac6d6bb3c237a30597ffce28bc8a48254" kindref="member">at</ref>(int32_t,<sp/>vecA,<sp/>2),<sp/><ref refid="core_8h_1ac6d6bb3c237a30597ffce28bc8a48254" kindref="member">at</ref>(int32_t,<sp/>vecA,<sp/>3));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>above<sp/>code<sp/>will<sp/>print</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Type<sp/>of<sp/>vecA:<sp/>float</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>[1.10<sp/>2.20<sp/>3.30<sp/>4.40]</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Type<sp/>of<sp/>vecA:<sp/>int32_t</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>[1<sp/>2<sp/>3<sp/>4]</highlight></codeline>
</programlisting></para><para><simplesect kind="warning"><para>Note that changing the access type of <ref refid="core_8h_1ac6d6bb3c237a30597ffce28bc8a48254" kindref="member">at</ref> function does not change the type of the matrix or the data in the memory. In <ref refid="core_8h_1ac6d6bb3c237a30597ffce28bc8a48254" kindref="member">at</ref> or <ref refid="core_8h_1a17dd213399b468eaf01f9852a3ca36fc" kindref="member">data</ref>, type variable is used to determine the size of one element and jump to the correct index. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="710" column="9" bodyfile="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" bodystart="710" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1ac161f0f0a945b552762c995c759c9f5a" prot="public" static="no">
        <name>matrix_create</name>
        <param><defname>...</defname></param>
        <briefdescription>
<para>Creates a new matrix element with the specified paramaters. This macro overloaded with respect to number of arguments. The actual function takes five input arguments so the macro implementation could take up to five arguments as follows: </para>        </briefdescription>
        <detaileddescription>
<para><verbatim>matrix_create(&lt;type&gt;, uint32_t rows = 0, uint32_t cols = 0, uint32_t channels = 0, void *pointer = NULL)
</verbatim> Missing arguments are replaced with the default values. In the simplest case the function could take the only type of the matrix. This type could be any c types defined in stdint.h or struct created by the user. <programlisting><codeline><highlight class="normal"><ref refid="structmatrix__t" kindref="compound">matrix_t</ref><sp/>*out<sp/>=<sp/><ref refid="core_8h_1ac161f0f0a945b552762c995c759c9f5a" kindref="member">matrix_create</ref>(uint32_t);</highlight></codeline>
</programlisting> The above code will create a matrix object and set the initial size to zero. If you want to specify the size of the matrix at the construction call: <programlisting><codeline><highlight class="normal"><ref refid="structmatrix__t" kindref="compound">matrix_t</ref><sp/>*out<sp/>=<sp/><ref refid="core_8h_1ac161f0f0a945b552762c995c759c9f5a" kindref="member">matrix_create</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/>1024,<sp/>1024);</highlight></codeline>
</programlisting> This call of the <ref refid="core_8h_1ac161f0f0a945b552762c995c759c9f5a" kindref="member">matrix_create</ref> will create a floating point data pointer and allocate 1024*1024*sizeof(float) byte memory on the memory. It is also possible to create a matrix from an existing one or from c pointers. In this case the third argument should be the pointer to the data: <programlisting><codeline><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>numbers[9]<sp/>=<sp/>{1,2,3,<sp/>4,5,6,<sp/>7,8,9};</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>new<sp/>matrix<sp/>from<sp/>the<sp/>given<sp/>C<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="structmatrix__t" kindref="compound">matrix_t</ref><sp/>*out<sp/>=<sp/><ref refid="core_8h_1ac161f0f0a945b552762c995c759c9f5a" kindref="member">matrix_create</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>3,3,1,<sp/>numbers);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>new<sp/>matrix<sp/>with<sp/>the<sp/>type<sp/>and<sp/>size<sp/>of<sp/>the<sp/>out</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="structmatrix__t" kindref="compound">matrix_t</ref><sp/>*out_copy<sp/>=<sp/><ref refid="core_8h_1ac161f0f0a945b552762c995c759c9f5a" kindref="member">matrix_create</ref>(out,<sp/>NULL);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>new<sp/>matrix<sp/>with<sp/>the<sp/>type,<sp/>size<sp/>and<sp/>data<sp/>of<sp/>the<sp/>out</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="structmatrix__t" kindref="compound">matrix_t</ref><sp/>*out_clone<sp/>=<sp/><ref refid="core_8h_1ac161f0f0a945b552762c995c759c9f5a" kindref="member">matrix_create</ref>(out,<sp/><ref refid="core_8h_1a17dd213399b468eaf01f9852a3ca36fc" kindref="member">data</ref>(out));</highlight></codeline>
</programlisting> In this case matrix_create will allocate memory and do <bold>memcpy</bold> operation on the given pointer.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>&lt;type&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>Content type of the matrix data. It could be any type char,uint32_t, float or user defined structures. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rows</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows (height) of the output matrix. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cols</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of columns (width) of the output matrix. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channels</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of channels of the output matrix. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pointer</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to be set to the matrix data </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="936" column="9" bodyfile="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" bodystart="936" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1a28dbdb1db0c3b677a584c7c4d4262949" prot="public" static="no">
        <name>matrix_convert</name>
        <param><defname>_t1</defname></param>
        <param><defname>_t2</defname></param>
        <param><defname>_in</defname></param>
        <briefdescription>
<para>This method converts the input matrix (t1 typed) into t2 typed matrix by just casting values. </para>        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>data[4]<sp/>=<sp/>{1.1,<sp/>2.2,<sp/>3.3,<sp/>4.4};</highlight></codeline>
<codeline><highlight class="normal"><ref refid="structmatrix__t" kindref="compound">matrix_t</ref><sp/>*matA<sp/>=<sp/><ref refid="core_8h_1ac161f0f0a945b552762c995c759c9f5a" kindref="member">matrix_create</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/>1,4,1,<sp/>data);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>print<sp/>the<sp/>type<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">printf(</highlight><highlight class="stringliteral">&quot;Type<sp/>of<sp/>matA:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">(matA));</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>print<sp/>the<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">printf(</highlight><highlight class="stringliteral">&quot;[%3.2f<sp/>%3.2f<sp/>%3.2f<sp/>%3.2f]\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="core_8h_1ac6d6bb3c237a30597ffce28bc8a48254" kindref="member">at</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/>matA,<sp/>0),<sp/><ref refid="core_8h_1ac6d6bb3c237a30597ffce28bc8a48254" kindref="member">at</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/>matA,<sp/>1),<sp/><ref refid="core_8h_1ac6d6bb3c237a30597ffce28bc8a48254" kindref="member">at</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/>matA,<sp/>2),<sp/><ref refid="core_8h_1ac6d6bb3c237a30597ffce28bc8a48254" kindref="member">at</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/>matA,<sp/>3));</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>convert<sp/>the<sp/>values<sp/>into<sp/>int<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="core_8h_1a28dbdb1db0c3b677a584c7c4d4262949" kindref="member">matrix_convert</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/>int32_t,<sp/>matA);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>print<sp/>the<sp/>type<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">printf(</highlight><highlight class="stringliteral">&quot;Type<sp/>of<sp/>matA:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">(matA));</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>print<sp/>the<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">printf(</highlight><highlight class="stringliteral">&quot;[%d<sp/>%d<sp/>%d<sp/>%d]\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="core_8h_1ac6d6bb3c237a30597ffce28bc8a48254" kindref="member">at</ref>(int32_t,<sp/>matA,<sp/>0),<sp/><ref refid="core_8h_1ac6d6bb3c237a30597ffce28bc8a48254" kindref="member">at</ref>(int32_t,<sp/>matA,<sp/>1),<sp/><ref refid="core_8h_1ac6d6bb3c237a30597ffce28bc8a48254" kindref="member">at</ref>(int32_t,<sp/>matA,<sp/>2),<sp/><ref refid="core_8h_1ac6d6bb3c237a30597ffce28bc8a48254" kindref="member">at</ref>(int32_t,<sp/>matA,<sp/>3));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>above<sp/>code<sp/>will<sp/>print</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Type<sp/>of<sp/>matA:<sp/>float</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>[1.10<sp/>2.20<sp/>3.30<sp/>4.40]</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Type<sp/>of<sp/>matA:<sp/>int32_t</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>[1<sp/>2<sp/>3<sp/>4]</highlight></codeline>
</programlisting></para><para><simplesect kind="warning"><para>Note that changing the access type of <ref refid="core_8h_1ac6d6bb3c237a30597ffce28bc8a48254" kindref="member">at</ref> function does not change the type of the matrix or the data in the memory. In <ref refid="core_8h_1ac6d6bb3c237a30597ffce28bc8a48254" kindref="member">at</ref> or <ref refid="core_8h_1a17dd213399b468eaf01f9852a3ca36fc" kindref="member">data</ref>, type variable is used to determine the size of one element and jump to the correct index. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="1082" column="9" bodyfile="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" bodystart="1082" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="core_8h_1a387664de0ac452f11abed4a7d9c2cc5d" prot="public" static="no">
        <name>return_t</name>
        <enumvalue id="core_8h_1a387664de0ac452f11abed4a7d9c2cc5da9580aa0567f97e920c0d34aaec19f23f" prot="public">
          <name>RETURN_ERROR_NOT_IMAGE</name>
          <initializer>= -7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="core_8h_1a387664de0ac452f11abed4a7d9c2cc5da029392ba69be14bf52411b0a4cc83e34" prot="public">
          <name>RETURN_ERROR_NULL_TYPE</name>
          <initializer>= -6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="core_8h_1a387664de0ac452f11abed4a7d9c2cc5dac2ba993c8780477a85ee45563ba5935c" prot="public">
          <name>RETURN_ERROR_TYPE_MISMATCH</name>
          <initializer>= -5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="core_8h_1a387664de0ac452f11abed4a7d9c2cc5da91de8030ad3983d68f74dfa42d5c6d4a" prot="public">
          <name>RETURN_ERROR_DIMENSION_MISMATCH</name>
          <initializer>= -4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="core_8h_1a387664de0ac452f11abed4a7d9c2cc5dac0210b023b69e9377b51715d5a9cb784" prot="public">
          <name>RETURN_ERROR_OUT_OF_MEMORY</name>
          <initializer>= -3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="core_8h_1a387664de0ac452f11abed4a7d9c2cc5da0860998dec5c82769c3cd1f5e4b2780f" prot="public">
          <name>RETURN_ERROR_UNABLE_TO_OPEN</name>
          <initializer>= -2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="core_8h_1a387664de0ac452f11abed4a7d9c2cc5da0d69fbc6071c40de52479590e5ac5121" prot="public">
          <name>RETURN_ERROR</name>
          <initializer>= -1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="core_8h_1a387664de0ac452f11abed4a7d9c2cc5dab982cbffafc9ffd71344fa63bb58a21e" prot="public">
          <name>RETURN_SUCCESS</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="core_8h_1a387664de0ac452f11abed4a7d9c2cc5da61a532f9f2334f1c9c0f11cc696b42df" prot="public">
          <name>RETURN_WARNING_NOT_SUPPORTED</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="core_8h_1a387664de0ac452f11abed4a7d9c2cc5da2419ddd6b96980f15e9f9a55fbe65625" prot="public">
          <name>RETURN_WARNING_NOTHING_DONE</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="core_8h_1a387664de0ac452f11abed4a7d9c2cc5dab13aaecdc52300a21d82f75c3802043e" prot="public">
          <name>RETURN_WARNING_UNKNOWN</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>IMLAB return type Return type for most of the IMLAB function. Returns a negative integer when an error occurs. Than this error can be categorized using the value of the return. Return a positive integer when everything done without any problem. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="268" column="1" bodyfile="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" bodystart="268" bodyend="282"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="core_8h_1acb1498be34b04cf145f6b2abdae81139" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="core_8h_1a387664de0ac452f11abed4a7d9c2cc5d" kindref="member">return_t</ref></type>
        <definition>return_t print_message_func</definition>
        <argsstring>(return_t cond, int line, const char *func, const char *msg)</argsstring>
        <name>print_message_func</name>
        <param>
          <type><ref refid="core_8h_1a387664de0ac452f11abed4a7d9c2cc5d" kindref="member">return_t</ref></type>
          <declname>cond</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>func</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="284" column="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a0299600e6d3dba5acead5053154ae799" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t array_size</definition>
        <argsstring>(void *head, uint32_t dim)</argsstring>
        <name>array_size</name>
        <param>
          <type>void *</type>
          <declname>head</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the size of the array in the given dimension. If the array is NULL or dim is higher than 4, this function returns 0. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>head</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array allocated by <ref refid="core_8h_1a0571ef46332e2c3a940591c0ef238a45" kindref="member">array_create</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dim</parametername>
</parameternamelist>
<parameterdescription>
<para>Dimension of the input array </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Length of the array in the given dimension </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="334" column="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a3f5d08adf92318efd3aa3418606e686f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void array_free</definition>
        <argsstring>(void *head)</argsstring>
        <name>array_free</name>
        <param>
          <type>void *</type>
          <declname>head</declname>
        </param>
        <briefdescription>
<para>Free the memory allocated by the given array and set the pointer to NULL. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>head</parametername>
</parameternamelist>
<parameterdescription>
<para>Input array to be deleted. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="remark"><para>Input array must be allocated by <ref refid="core_8h_1a0571ef46332e2c3a940591c0ef238a45" kindref="member">array_create</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="341" column="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1ad01ac83830d189c931e48ecd3986cda2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvector__t" kindref="compound">vector_t</ref> *</type>
        <definition>vector_t* vector_null</definition>
        <argsstring>()</argsstring>
        <name>vector_null</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a NULL vector. This vector will hold sizeof(vector_t) bytes of memory and should be used for all vector pointers that are not created at the declaration. <simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="573" column="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1adaeadebefce3d6e4d6e9e68662da874f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="core_8h_1a387664de0ac452f11abed4a7d9c2cc5d" kindref="member">return_t</ref></type>
        <definition>return_t vector_resize</definition>
        <argsstring>(vector_t *var, uint32_t _capacity)</argsstring>
        <name>vector_resize</name>
        <param>
          <type><ref refid="structvector__t" kindref="compound">vector_t</ref> *</type>
          <declname>var</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>_capacity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Resize the input vector to the specified size. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>var</parametername>
</parameternamelist>
<parameterdescription>
<para>Input vector to be resized. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncapacity</parametername>
</parameternamelist>
<parameterdescription>
<para>New capacity of the input vector. If the new length is larger than the current length, the contents of the vector is protected. If the new length is smaller than the current length, the #(new length) of the input vector is protected. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="582" column="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1af09d64899cb5a7eb37453f495cc929f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="core_8h_1a387664de0ac452f11abed4a7d9c2cc5d" kindref="member">return_t</ref></type>
        <definition>return_t vector_push</definition>
        <argsstring>(vector_t *var, void *element)</argsstring>
        <name>vector_push</name>
        <param>
          <type><ref refid="structvector__t" kindref="compound">vector_t</ref> *</type>
          <declname>var</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>element</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pushes an element into the end of the vector. If the length of the vector exceeds the vector length it automatically allocate memory for the new data. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_var</parametername>
</parameternamelist>
<parameterdescription>
<para>Input vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_element</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the data to be pushed. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="590" column="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a268b0cbf4bfe212ad76135307957396a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="core_8h_1a387664de0ac452f11abed4a7d9c2cc5d" kindref="member">return_t</ref></type>
        <definition>return_t vector_pop</definition>
        <argsstring>(vector_t *var, void *element)</argsstring>
        <name>vector_pop</name>
        <param>
          <type><ref refid="structvector__t" kindref="compound">vector_t</ref> *</type>
          <declname>var</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>element</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pops an element from the end of the vector and deletes the last element of the vector. This method does not change the capacity of the vector. You can manually resize the vector if you want to use less memory. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_var</parametername>
</parameternamelist>
<parameterdescription>
<para>Input vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_element</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of an element to be popped into. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="599" column="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a2b7f60914645844e72dfc22e0ea9d78b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vector_set</definition>
        <argsstring>(vector_t *var, uint32_t idx, void *value)</argsstring>
        <name>vector_set</name>
        <param>
          <type><ref refid="structvector__t" kindref="compound">vector_t</ref> *</type>
          <declname>var</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the idx&apos;th element of the vector to the given value. This is not the correct way to insert an element to the vector. Use vector_push for adding a new element to the vector. This function is intented to be used internally or in loops so in order to be fast it doesnt control the idx and it will create a serious bug if you try to insert an element at any index larger than the length of the vector and it will create a buffer overflow if index is larger than the capacity of the vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>var</parametername>
</parameternamelist>
<parameterdescription>
<para>Input vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the vector element to be set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the data to be set. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="610" column="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a83cd095cd1108b2eba56fcecbe8f2140" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vector_get</definition>
        <argsstring>(vector_t *var, uint32_t idx, void *value)</argsstring>
        <name>vector_get</name>
        <param>
          <type><ref refid="structvector__t" kindref="compound">vector_t</ref> *</type>
          <declname>var</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the idx&apos;th element of the vector to the given variable. This is not the correct way to extract an element from the vector. Use vector_pop for extracting an element from the vector. This function is intented to be used internally or in loops so in order to be fast it doesnt control the idx and it will create a serious bug if you try to get an element at any index larger than the length of the vector and it will create a buffer overflow if index is larger than the capacity of the vector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>var</parametername>
</parameternamelist>
<parameterdescription>
<para>Input vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the vector element to be set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the data to be set. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="621" column="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a9d0bb0a950b4bc487c596f6b86ddaa46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="core_8h_1a387664de0ac452f11abed4a7d9c2cc5d" kindref="member">return_t</ref></type>
        <definition>return_t vector_permute</definition>
        <argsstring>(vector_t *in, uint32_t *index_list)</argsstring>
        <name>vector_permute</name>
        <param>
          <type><ref refid="structvector__t" kindref="compound">vector_t</ref> *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>index_list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Permute the entries of the vector with the given index list. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_var</parametername>
</parameternamelist>
<parameterdescription>
<para>Input vector to be permuted. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index list for the permuted vector. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="628" column="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a790a513601c408b9b76cf8a6228a2213" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vector_free</definition>
        <argsstring>(vector_t **var)</argsstring>
        <name>vector_free</name>
        <param>
          <type><ref refid="structvector__t" kindref="compound">vector_t</ref> **</type>
          <declname>var</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Release the allocated memory for the vector object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_var</parametername>
</parameternamelist>
<parameterdescription>
<para>Input vector to be freed. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="634" column="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a2ed78ff337337c3e7d13b34cd35a54fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vector_destructor</definition>
        <argsstring>(vector_t *in, void(*func)(void *, uint32_t))</argsstring>
        <name>vector_destructor</name>
        <param>
          <type><ref refid="structvector__t" kindref="compound">vector_t</ref> *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>void(*)(void *, uint32_t)</type>
          <declname>func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets a destructor for the data holded in the vector container <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>Input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>Destructor function to be set </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="641" column="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a1a3e7877bd0c2ed2e671a3b613913dd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="core_8h_1a387664de0ac452f11abed4a7d9c2cc5d" kindref="member">return_t</ref></type>
        <definition>return_t vector_fill</definition>
        <argsstring>(vector_t *var, void *value)</argsstring>
        <name>vector_fill</name>
        <param>
          <type><ref refid="structvector__t" kindref="compound">vector_t</ref> *</type>
          <declname>var</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>var</parametername>
</parameternamelist>
<parameterdescription>
<para>Input vector to be filled. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the variable to be filled into the vector element. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="649" column="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a382e5a7fe0f9fc241ecd3304f5853517" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="core_8h_1a387664de0ac452f11abed4a7d9c2cc5d" kindref="member">return_t</ref></type>
        <definition>return_t vector_write</definition>
        <argsstring>(vector_t *src, const char *filename)</argsstring>
        <name>vector_write</name>
        <param>
          <type><ref refid="structvector__t" kindref="compound">vector_t</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Save the input vector to the given file. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>Output file name with an appropriate extension. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Input vector structure to be saved. The default option (0) saves the file without any compression. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="658" column="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a40c40d599551f38a807ce500a8da634c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvector__t" kindref="compound">vector_t</ref> *</type>
        <definition>vector_t* vector_read</definition>
        <argsstring>(const char *filename)</argsstring>
        <name>vector_read</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read the input vector from the given file. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>Input file name with an appropriate extension. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Read vector from the file </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="665" column="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a76c71a2d5dc927ecfaf7edbe02641a2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="core_8h_1a387664de0ac452f11abed4a7d9c2cc5d" kindref="member">return_t</ref></type>
        <definition>return_t vector_unique</definition>
        <argsstring>(vector_t *src, vector_t *uniques, vector_t *unique_idx)</argsstring>
        <name>vector_unique</name>
        <param>
          <type><ref refid="structvector__t" kindref="compound">vector_t</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="structvector__t" kindref="compound">vector_t</ref> *</type>
          <declname>uniques</declname>
        </param>
        <param>
          <type><ref refid="structvector__t" kindref="compound">vector_t</ref> *</type>
          <declname>unique_idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the unique elements of the vector <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Input vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uniques</parametername>
</parameternamelist>
<parameterdescription>
<para>Unique elements created with the same type of the source </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unique_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the unique elements </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="674" column="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a804f45c12e20b7a946b891322e19ab5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vector_view</definition>
        <argsstring>(vector_t *in)</argsstring>
        <name>vector_view</name>
        <param>
          <type><ref refid="structvector__t" kindref="compound">vector_t</ref> *</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Print the properties of the vector container <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>Input vector to be viewed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="680" column="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a9b5423f6356f19bde71fc706337bbc2d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>void* vdata</definition>
        <argsstring>(vector_t *this, uint32_t idx)</argsstring>
        <name>vdata</name>
        <param>
          <type><ref refid="structvector__t" kindref="compound">vector_t</ref> *</type>
          <declname>this</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the data pointer of the vector <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>this</parametername>
</parameternamelist>
<parameterdescription>
<para>Input vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the start of the vector data </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="731" column="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1aab37196bc836e9a106deac981b0a28e7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t length</definition>
        <argsstring>(vector_t *this)</argsstring>
        <name>length</name>
        <param>
          <type><ref refid="structvector__t" kindref="compound">vector_t</ref> *</type>
          <declname>this</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the length of the vector <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>this</parametername>
</parameternamelist>
<parameterdescription>
<para>Input vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Length of the input vector </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="737" column="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a356cce4442240ba05926d09fc49cfa20" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t capacity</definition>
        <argsstring>(vector_t *this)</argsstring>
        <name>capacity</name>
        <param>
          <type><ref refid="structvector__t" kindref="compound">vector_t</ref> *</type>
          <declname>this</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the capacity of the vector <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>this</parametername>
</parameternamelist>
<parameterdescription>
<para>Input vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Capacity of the input vector </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="743" column="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1aadedd3563a338b64c4c90aec216a5dcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct imlab_type_t *</type>
        <definition>struct imlab_type_t* vector_type</definition>
        <argsstring>(vector_t *this)</argsstring>
        <name>vector_type</name>
        <param>
          <type><ref refid="structvector__t" kindref="compound">vector_t</ref> *</type>
          <declname>this</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the type of the vector <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>this</parametername>
</parameternamelist>
<parameterdescription>
<para>Input vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Type information of the input vector </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="750" column="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1acc7a9dfe6c097fe10e5e2ed75fd34a03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmatrix__t" kindref="compound">matrix_t</ref> *</type>
        <definition>matrix_t* matrix_null</definition>
        <argsstring>()</argsstring>
        <name>matrix_null</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a NULL matrix <simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="961" column="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1af0adbd705a9183e8aa7f0b0a9dbb264b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void matrix_set</definition>
        <argsstring>(matrix_t *var, uint32_t rows, uint32_t cols, uint32_t channels, void *value)</argsstring>
        <name>matrix_set</name>
        <param>
          <type><ref refid="structmatrix__t" kindref="compound">matrix_t</ref> *</type>
          <declname>var</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>cols</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>channels</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the value of a matrix element to the given variable. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>var</parametername>
</parameternamelist>
<parameterdescription>
<para>Input matrix </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rows</parametername>
</parameternamelist>
<parameterdescription>
<para>Row of the matrix element to be set </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cols</parametername>
</parameternamelist>
<parameterdescription>
<para>Column of the matrix element to be set </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channels</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel of the matrix element to be set </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the variable to be set </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="971" column="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a550c7dd7c707bc97b3d9ba8eb7fe48c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void matrix_get</definition>
        <argsstring>(matrix_t *var, uint32_t rows, uint32_t cols, uint32_t channels, void *value)</argsstring>
        <name>matrix_get</name>
        <param>
          <type><ref refid="structmatrix__t" kindref="compound">matrix_t</ref> *</type>
          <declname>var</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>cols</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>channels</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the given variable to the value of a matrix element in var(rows,cols,channels) position. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>var</parametername>
</parameternamelist>
<parameterdescription>
<para>Input matrix </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rows</parametername>
</parameternamelist>
<parameterdescription>
<para>Row of the matrix element to be get </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cols</parametername>
</parameternamelist>
<parameterdescription>
<para>Column of the matrix element to be get </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channels</parametername>
</parameternamelist>
<parameterdescription>
<para>Channels channel of the matrix element to be get </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the variable to be get into </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="981" column="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a8c7c23897827cb7c83773edf1fa6109a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="core_8h_1a387664de0ac452f11abed4a7d9c2cc5d" kindref="member">return_t</ref></type>
        <definition>return_t matrix_resize</definition>
        <argsstring>(matrix_t *var, uint32_t nrows, uint32_t ncols, uint32_t nchannels)</argsstring>
        <name>matrix_resize</name>
        <param>
          <type><ref refid="structmatrix__t" kindref="compound">matrix_t</ref> *</type>
          <declname>var</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>nrows</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ncols</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>nchannels</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Resize the input matrix to the specified size. This function is used most of the functions in order to create output matrix. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_var</parametername>
</parameternamelist>
<parameterdescription>
<para>Input matrix to be resized. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_nrows</parametername>
</parameternamelist>
<parameterdescription>
<para>New rows of the input matrix. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_ncols</parametername>
</parameternamelist>
<parameterdescription>
<para>New columns of the input matrix. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_nchannels</parametername>
</parameternamelist>
<parameterdescription>
<para>New channels of the input matrix. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="990" column="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a0a79ff5bb889197066e74bfe29502646" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvector__t" kindref="compound">vector_t</ref> *</type>
        <definition>vector_t* matrix2vector</definition>
        <argsstring>(matrix_t *input, uint8_t order)</argsstring>
        <name>matrix2vector</name>
        <param>
          <type><ref refid="structmatrix__t" kindref="compound">matrix_t</ref> *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert the matrix into a vector <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>Input matrix </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>order</parametername>
</parameternamelist>
<parameterdescription>
<para>Row first or coloumn first conversion </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector filled with matrix element </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="998" column="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1ad0c77c70c8d497343a0a46edb6b5a366" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void matrix_free</definition>
        <argsstring>(matrix_t **var)</argsstring>
        <name>matrix_free</name>
        <param>
          <type><ref refid="structmatrix__t" kindref="compound">matrix_t</ref> **</type>
          <declname>var</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Release the allocated memory for the matrix object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_var</parametername>
</parameternamelist>
<parameterdescription>
<para>Input matrix to be freed. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="1003" column="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a805dd9c2c14404e3ea44a0d35b2723ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void matrix_destructor</definition>
        <argsstring>(matrix_t *in, void(*func)(void *, uint32_t))</argsstring>
        <name>matrix_destructor</name>
        <param>
          <type><ref refid="structmatrix__t" kindref="compound">matrix_t</ref> *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>void(*)(void *, uint32_t)</type>
          <declname>func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets a destructor for the data holded in the matrix container <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>Input matrix </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>Destructor function to be set </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="1010" column="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1af58f7370d2d76be0c77300d0ef03b884" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="core_8h_1a387664de0ac452f11abed4a7d9c2cc5d" kindref="member">return_t</ref></type>
        <definition>return_t matrix_fill</definition>
        <argsstring>(matrix_t *out, void *value)</argsstring>
        <name>matrix_fill</name>
        <param>
          <type><ref refid="structmatrix__t" kindref="compound">matrix_t</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fill a matrix with the desired value. If there are multiple channels(channels != 1) than instead of sending single variable, send array of data which length is equal to channels double array[] = {255,0,128}; matrix_fill(color_image, array) by this way, _fill will copy 255 to the first, 0 to second and 128 to the third channel of the image <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_var</parametername>
</parameternamelist>
<parameterdescription>
<para>Input matrix to be filled. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to be written to each cell of the input matrix. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="1022" column="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1aed1a6797fa8dcb7916c39e35995a7bd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="core_8h_1a387664de0ac452f11abed4a7d9c2cc5d" kindref="member">return_t</ref></type>
        <definition>return_t matrix_copy</definition>
        <argsstring>(matrix_t *src, matrix_t *dst)</argsstring>
        <name>matrix_copy</name>
        <param>
          <type><ref refid="structmatrix__t" kindref="compound">matrix_t</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="structmatrix__t" kindref="compound">matrix_t</ref> *</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy source matrix into the destination matrix, resize the destination if needed <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Source matrix to be copied </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination matrix (same type with the source) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Success or relative error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="1030" column="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a6887bff44be577ee78deb33fb1922372" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="core_8h_1a387664de0ac452f11abed4a7d9c2cc5d" kindref="member">return_t</ref></type>
        <definition>return_t matrix_write</definition>
        <argsstring>(matrix_t *src, const char *filename)</argsstring>
        <name>matrix_write</name>
        <param>
          <type><ref refid="structmatrix__t" kindref="compound">matrix_t</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Save the input matrix to the disk <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Input matrix to be saved </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>Filename for the output file </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Success or relative error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="1038" column="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1ae9a5af75b74f3127240e8185f19b9527" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void matrix_view</definition>
        <argsstring>(matrix_t *in)</argsstring>
        <name>matrix_view</name>
        <param>
          <type><ref refid="structmatrix__t" kindref="compound">matrix_t</ref> *</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prints the matrix information into the stdout <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>Input matrix to be viewed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="1044" column="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a17aaa0a0fcf1572d8a804bf2352b76cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmatrix__t" kindref="compound">matrix_t</ref> *</type>
        <definition>matrix_t* matrix_read</definition>
        <argsstring>(const char *filename)</argsstring>
        <name>matrix_read</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read the matrix from the file <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>Filename of the matrix </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Non allocated matrix container for the destination </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Success or relative error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="1052" column="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a64dbf9d17ab3f7bf3656927f7ea465de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct imlab_type_t *</type>
        <definition>struct imlab_type_t* matrix_type</definition>
        <argsstring>(matrix_t *this)</argsstring>
        <name>matrix_type</name>
        <param>
          <type><ref refid="structmatrix__t" kindref="compound">matrix_t</ref> *</type>
          <declname>this</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the type of the matrix <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>this</parametername>
</parameternamelist>
<parameterdescription>
<para>Input matrix </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Type information of the matrix </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="1103" column="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1ad3f79e7a2a8f1a28e2a2d0160bcc8204" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>void* mdata</definition>
        <argsstring>(matrix_t *this, uint32_t idx)</argsstring>
        <name>mdata</name>
        <param>
          <type><ref refid="structmatrix__t" kindref="compound">matrix_t</ref> *</type>
          <declname>this</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the data pointer of the matrix <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>this</parametername>
</parameternamelist>
<parameterdescription>
<para>Input matrix </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the data of the matrix </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="1110" column="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a2248f650cacb1488751ff8ab82300752" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t width</definition>
        <argsstring>(matrix_t *this)</argsstring>
        <name>width</name>
        <param>
          <type><ref refid="structmatrix__t" kindref="compound">matrix_t</ref> *</type>
          <declname>this</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the width of the matrix <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>this</parametername>
</parameternamelist>
<parameterdescription>
<para>Input matrix </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Width of the input matrix </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="1117" column="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1ac0f4877be8d0a1990393b6fc48236840" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t height</definition>
        <argsstring>(matrix_t *this)</argsstring>
        <name>height</name>
        <param>
          <type><ref refid="structmatrix__t" kindref="compound">matrix_t</ref> *</type>
          <declname>this</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the height of the matrix <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>this</parametername>
</parameternamelist>
<parameterdescription>
<para>Input matrix </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Height of the input matrix </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="1123" column="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a4e8f84fef6fd8d43a680c07df40aba25" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t rows</definition>
        <argsstring>(matrix_t *this)</argsstring>
        <name>rows</name>
        <param>
          <type><ref refid="structmatrix__t" kindref="compound">matrix_t</ref> *</type>
          <declname>this</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the rows of the matrix <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>this</parametername>
</parameternamelist>
<parameterdescription>
<para>Input matrix </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Rows of the input matrix </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="1129" column="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1aece6b4cf48e00b533a3a022244ad8206" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t cols</definition>
        <argsstring>(matrix_t *this)</argsstring>
        <name>cols</name>
        <param>
          <type><ref refid="structmatrix__t" kindref="compound">matrix_t</ref> *</type>
          <declname>this</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the columns of the matrix <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>this</parametername>
</parameternamelist>
<parameterdescription>
<para>Input matrix </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Columns of the input matrix </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="1135" column="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1aa45db831c8afdad298fdd8f018be54b3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t channels</definition>
        <argsstring>(matrix_t *this)</argsstring>
        <name>channels</name>
        <param>
          <type><ref refid="structmatrix__t" kindref="compound">matrix_t</ref> *</type>
          <declname>this</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the channels of the matrix <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>this</parametername>
</parameternamelist>
<parameterdescription>
<para>Input matrix </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Channels of the input matrix </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="1141" column="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1aa3e75e22b1f228e338988c2e0815a7cf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t volume</definition>
        <argsstring>(matrix_t *this)</argsstring>
        <name>volume</name>
        <param>
          <type><ref refid="structmatrix__t" kindref="compound">matrix_t</ref> *</type>
          <declname>this</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the volume of the matrix <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>this</parametername>
</parameternamelist>
<parameterdescription>
<para>Input matrix </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Volume (Rows * Cols * Channels) of the input matrix </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="1147" column="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1ad00672744ced295010518528962e4e2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structstring__t" kindref="compound">string_t</ref></type>
        <definition>string_t string</definition>
        <argsstring>(char *cstr)</argsstring>
        <name>string</name>
        <param>
          <type>char *</type>
          <declname>cstr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a string from the given char pointer <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cstr</parametername>
</parameternamelist>
<parameterdescription>
<para>Input C string (char*) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structstring__t" kindref="compound">string_t</ref> object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="1161" column="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1acfb950504367cdac614c2564a827e860" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* c_str</definition>
        <argsstring>(string_t str)</argsstring>
        <name>c_str</name>
        <param>
          <type><ref refid="structstring__t" kindref="compound">string_t</ref></type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the C-compatible string of the string object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="structstring__t" kindref="compound">string_t</ref> object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>C-compatible string </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="1168" column="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a82caebfaea0a1881afca38e6ac54057c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="core_8h_1a387664de0ac452f11abed4a7d9c2cc5d" kindref="member">return_t</ref></type>
        <definition>return_t string_append</definition>
        <argsstring>(char *cstr, string_t *str)</argsstring>
        <name>string_append</name>
        <param>
          <type>char *</type>
          <declname>cstr</declname>
        </param>
        <param>
          <type><ref refid="structstring__t" kindref="compound">string_t</ref> *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Append the given C string into the <ref refid="structstring__t" kindref="compound">string_t</ref> variable <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cstr</parametername>
</parameternamelist>
<parameterdescription>
<para>Input C string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Output <ref refid="structstring__t" kindref="compound">string_t</ref> object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Success or relative error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="1176" column="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1aeb01be5d18a1fc436c93443334460337" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="core_8h_1a387664de0ac452f11abed4a7d9c2cc5d" kindref="member">return_t</ref></type>
        <definition>return_t string_merge</definition>
        <argsstring>(string_t *out_str, string_t *in_str)</argsstring>
        <name>string_merge</name>
        <param>
          <type><ref refid="structstring__t" kindref="compound">string_t</ref> *</type>
          <declname>out_str</declname>
        </param>
        <param>
          <type><ref refid="structstring__t" kindref="compound">string_t</ref> *</type>
          <declname>in_str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Merges the given two <ref refid="structstring__t" kindref="compound">string_t</ref> object and writes the output string into the first element <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out_str</parametername>
</parameternamelist>
<parameterdescription>
<para>First string element to be merged and also the output of the merge operation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>in_str</parametername>
</parameternamelist>
<parameterdescription>
<para>Second string object to be merged with the first one </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Success or relative error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="1184" column="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1ad88b89a5e662a099005f4291b6984e0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void string_destruct</definition>
        <argsstring>(void *in, uint32_t length)</argsstring>
        <name>string_destruct</name>
        <param>
          <type>void *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destructor of <ref refid="structstring__t" kindref="compound">string_t</ref> *data array <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>Input <ref refid="structstring__t" kindref="compound">string_t</ref> *array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the pointer </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="1191" column="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a49602d24ffcfbf283c05eb9ae992c388" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="core_8h_1a387664de0ac452f11abed4a7d9c2cc5d" kindref="member">return_t</ref></type>
        <definition>return_t string_printf</definition>
        <argsstring>(string_t *str, const char *format,...)</argsstring>
        <name>string_printf</name>
        <param>
          <type><ref refid="structstring__t" kindref="compound">string_t</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Appends the given format string into the <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str.</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Output string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Format string to be written </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><programlisting><codeline><highlight class="comment">//<sp/>first<sp/>create<sp/>an<sp/>empty<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="structstring__t" kindref="compound">string_t</ref><sp/>stream<sp/>=<sp/><ref refid="core_8h_1ad00672744ced295010518528962e4e2f" kindref="member">string</ref>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>fill<sp/>the<sp/>string<sp/>with<sp/>the<sp/>given<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="core_8h_1a49602d24ffcfbf283c05eb9ae992c388" kindref="member">string_printf</ref>(&amp;stream,<sp/></highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="core_8h_1a49602d24ffcfbf283c05eb9ae992c388" kindref="member">string_printf</ref>(&amp;stream,<sp/></highlight><highlight class="stringliteral">&quot;%c&quot;</highlight><highlight class="normal">,<sp/>32);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="core_8h_1a49602d24ffcfbf283c05eb9ae992c388" kindref="member">string_printf</ref>(&amp;stream,<sp/></highlight><highlight class="stringliteral">&quot;IML@B&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>print<sp/>the<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">printf(</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="core_8h_1acfb950504367cdac614c2564a827e860" kindref="member">c_str</ref>(stream));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>above<sp/>code<sp/>will<sp/>print</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>hello<sp/>IML@B</highlight></codeline>
</programlisting> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="1213" column="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a097eefcfd24338555d7d6619540b6949" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="core_8h_1a387664de0ac452f11abed4a7d9c2cc5d" kindref="member">return_t</ref></type>
        <definition>return_t string_restart</definition>
        <argsstring>(string_t *str)</argsstring>
        <name>string_restart</name>
        <param>
          <type><ref refid="structstring__t" kindref="compound">string_t</ref> *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="1215" column="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1ac81781a9892db8112b0c7bfcd621b487" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structrectangle__t" kindref="compound">rectangle_t</ref></type>
        <definition>struct rectangle_t rectangle</definition>
        <argsstring>(int32_t x, int32_t y, int32_t width, int32_t height, float coefficient)</argsstring>
        <name>rectangle</name>
        <param>
          <type>int32_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>height</declname>
        </param>
        <param>
          <type>float</type>
          <declname>coefficient</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new rectangle with the given parameters <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>x position of the top-left corner </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>x position of the top-left corner </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>Width of the rectangle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>Height of the rectangle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>coefficient</parametername>
</parameternamelist>
<parameterdescription>
<para>A floating point number assign to the rectangle (it could be detection score, color, opacity vs) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A rectangle object created in stack </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="1215" column="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a7419ce0ad6c35b0dcb2132943ffe1380" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float rectangle_overlap</definition>
        <argsstring>(struct rectangle_t r1, struct rectangle_t r2, uint8_t mode)</argsstring>
        <name>rectangle_overlap</name>
        <param>
          <type>struct <ref refid="structrectangle__t" kindref="compound">rectangle_t</ref></type>
          <declname>r1</declname>
        </param>
        <param>
          <type>struct <ref refid="structrectangle__t" kindref="compound">rectangle_t</ref></type>
          <declname>r2</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Computes the overlapping area between the two rectangle objects. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>box1</parametername>
</parameternamelist>
<parameterdescription>
<para>First rectangle object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>box2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second rectangle object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>0 for overlapping area between the two rectangle and 1 for normalized intersection area </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Area of the intersection </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="1242" column="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a4e6bcece32bf71fd763466b7ac63f1f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvector__t" kindref="compound">vector_t</ref> *</type>
        <definition>vector_t* rectangle_merge</definition>
        <argsstring>(vector_t *rect, float threshold, uint8_t method)</argsstring>
        <name>rectangle_merge</name>
        <param>
          <type><ref refid="structvector__t" kindref="compound">vector_t</ref> *</type>
          <declname>rect</declname>
        </param>
        <param>
          <type>float</type>
          <declname>threshold</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>method</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="1244" column="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1af097826b45caa62ef786e23dab7b7769" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structpoint__t" kindref="compound">point_t</ref></type>
        <definition>struct point_t point</definition>
        <argsstring>(float x, float y, float z)</argsstring>
        <name>point</name>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <param>
          <type>float</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Create a new point with the given parameters. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>x position of the point </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>y position of the point </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>z position of the point </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A point object created in stack </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="1244" column="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a2ca2176d318299f8491b0771d5cc4b71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float point_distance</definition>
        <argsstring>(struct point_t p1, struct point_t p2)</argsstring>
        <name>point_distance</name>
        <param>
          <type>struct <ref refid="structpoint__t" kindref="compound">point_t</ref></type>
          <declname>p1</declname>
        </param>
        <param>
          <type>struct <ref refid="structpoint__t" kindref="compound">point_t</ref></type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>Computes the distance between the given two points. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p1</parametername>
</parameternamelist>
<parameterdescription>
<para>First point </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second point </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Euclidean distance between the points </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h" line="1268" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>File containing example of doxygen usage for quick reference. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>My Self </para></simplesect>
<simplesect kind="date"><para>9 Sep 2012 Here typically goes a more extensive explanation of what the header defines. Doxygens tags are words preceeded by either a backslash \ or by an at symbol @. </para></simplesect>
<simplesect kind="see"><para><ulink url="http://www.stack.nl/~dimitri/doxygen/docblocks.html">http://www.stack.nl/~dimitri/doxygen/docblocks.html</ulink> </para><simplesectsep/><para><ulink url="http://www.stack.nl/~dimitri/doxygen/commands.html">http://www.stack.nl/~dimitri/doxygen/commands.html</ulink> </para></simplesect>
</para>    </detaileddescription>
    <location file="C:/Users/cescript/CLionProjects/imlab/include/header/core.h"/>
  </compounddef>
</doxygen>
